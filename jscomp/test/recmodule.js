// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("../../lib/js/curry.js");
var Caml_module = require("../../lib/js/caml_module.js");

var Entity = {};

function MakeLayer(Deps) {
  var getLight = function (id) {
    return Curry._1(Deps.presentLight, {
                id: id,
                name: "Light 1"
              });
  };
  return {
          getLight: getLight
        };
}

var UseCase = {
  MakeLayer: MakeLayer
};

function MakeLayer$1(Deps, UC) {
  var presentLight = function (light) {
    return Curry._2(Deps.presentJson, light, 200);
  };
  var handleGetLight = function (req) {
    return Curry._1(UC.getLight, req.params.id);
  };
  return {
          handleGetLight: handleGetLight,
          presentLight: presentLight
        };
}

var Adapter = {
  MakeLayer: MakeLayer$1
};

function MakeLayer$2(Deps) {
  var presentJson = function (json, status) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "recmodule.res",
            60,
            41
          ],
          Error: new Error()
        };
  };
  var routes = function (param) {
    return [[
              "/lights",
              Deps.handleGetLight
            ]];
  };
  return {
          presentJson: presentJson,
          routes: routes
        };
}

var Infra = {
  MakeLayer: MakeLayer$2
};

var I = Caml_module.init_mod([
      "recmodule.res",
      67,
      30
    ], {
      TAG: "Module",
      _0: [
        [
          "Function",
          "presentJson"
        ],
        [
          "Function",
          "routes"
        ]
      ]
    });

var A = Caml_module.init_mod([
      "recmodule.res",
      68,
      25
    ], {
      TAG: "Module",
      _0: [
        [
          "Function",
          "handleGetLight"
        ],
        [
          "Function",
          "presentLight"
        ]
      ]
    });

var U = Caml_module.init_mod([
      "recmodule.res",
      69,
      25
    ], {
      TAG: "Module",
      _0: [[
          "Function",
          "getLight"
        ]]
    });

function presentJson(json, status) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "recmodule.res",
          60,
          41
        ],
        Error: new Error()
      };
}

function routes(param) {
  return [[
            "/lights",
            A.handleGetLight
          ]];
}

Caml_module.update_mod({
      TAG: "Module",
      _0: [
        [
          "Function",
          "presentJson"
        ],
        [
          "Function",
          "routes"
        ]
      ]
    }, I, {
      presentJson: presentJson,
      routes: routes
    });

function presentLight(light) {
  return Curry._2(I.presentJson, light, 200);
}

function handleGetLight(req) {
  return Curry._1(U.getLight, req.params.id);
}

Caml_module.update_mod({
      TAG: "Module",
      _0: [
        [
          "Function",
          "handleGetLight"
        ],
        [
          "Function",
          "presentLight"
        ]
      ]
    }, A, {
      handleGetLight: handleGetLight,
      presentLight: presentLight
    });

function getLight(id) {
  return Curry._1(A.presentLight, {
              id: id,
              name: "Light 1"
            });
}

Caml_module.update_mod({
      TAG: "Module",
      _0: [[
          "Function",
          "getLight"
        ]]
    }, U, {
      getLight: getLight
    });

var App = {
  I: I,
  A: A,
  U: U
};

exports.Entity = Entity;
exports.UseCase = UseCase;
exports.Adapter = Adapter;
exports.Infra = Infra;
exports.App = App;
/* I Not a pure module */
