type token =
  | NUMERAL(float)
  | IDENT(string)
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | UMINUS
  | LPAREN
  | RPAREN
  | EOF

open Parsing
let _ = parse_error
open Arith_syntax

let yytransl_const = [
  259 /* PLUS */,
  260 /* MINUS */,
  261 /* TIMES */,
  262 /* DIVIDE */,
  263 /* UMINUS */,
  264 /* LPAREN */,
  265 /* RPAREN */,
  0 /* EOF */,
  0,
]

let yytransl_block = [257 /* NUMERAL */, 258 /* IDENT */, 0]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\003\000\003\000\003\000\003\000\002\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\003\000\000\000\000\000\010\000\000\000\
\008\000\000\000\000\000\000\000\000\000\000\000\001\000\009\000\
\000\000\000\000\006\000\007\000"

let yydgoto = "\002\000\
\007\000\008\000"

let yysindex = "\255\255\
\016\255\000\000\000\000\000\000\016\255\016\255\000\000\010\000\
\000\000\022\255\016\255\016\255\016\255\016\255\000\000\000\000\
\255\254\255\254\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\003\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\002\000"

let yytablesize = 272
let yytable = "\001\000\
\004\000\000\000\005\000\013\000\014\000\000\000\009\000\010\000\
\000\000\015\000\000\000\000\000\017\000\018\000\019\000\020\000\
\003\000\004\000\000\000\005\000\000\000\000\000\000\000\006\000\
\011\000\012\000\013\000\014\000\000\000\000\000\016\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\004\000\004\000\005\000\005\000\000\000\
\000\000\004\000\000\000\005\000\011\000\012\000\013\000\014\000"

let yycheck = "\001\000\
\000\000\255\255\000\000\005\001\006\001\255\255\005\000\006\000\
\255\255\000\000\255\255\255\255\011\000\012\000\013\000\014\000\
\001\001\002\001\255\255\004\001\255\255\255\255\255\255\008\001\
\003\001\004\001\005\001\006\001\255\255\255\255\009\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\003\001\004\001\255\255\
\255\255\009\001\255\255\009\001\003\001\004\001\005\001\006\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  UMINUS\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  NUMERAL\000\
  IDENT\000\
  "

let yyact = [
  _ => failwith("parser"),
  __caml_parser_env => {
    let _1: 'expression = Parsing.peek_val(__caml_parser_env, 1)
    Obj.repr((_1: Arith_syntax.expression))
  },
  __caml_parser_env => {
    let _1: float = Parsing.peek_val(__caml_parser_env, 0)
    Obj.repr((Numeral(_1): 'expression))
  },
  __caml_parser_env => {
    let _1: string = Parsing.peek_val(__caml_parser_env, 0)
    Obj.repr((Variable(_1): 'expression))
  },
  __caml_parser_env => {
    let _1: 'expression = Parsing.peek_val(__caml_parser_env, 2)
    let _3: 'expression = Parsing.peek_val(__caml_parser_env, 0)
    Obj.repr((Plus(_1, _3): 'expression))
  },
  __caml_parser_env => {
    let _1: 'expression = Parsing.peek_val(__caml_parser_env, 2)
    let _3: 'expression = Parsing.peek_val(__caml_parser_env, 0)
    Obj.repr((Minus(_1, _3): 'expression))
  },
  __caml_parser_env => {
    let _1: 'expression = Parsing.peek_val(__caml_parser_env, 2)
    let _3: 'expression = Parsing.peek_val(__caml_parser_env, 0)
    Obj.repr((Times(_1, _3): 'expression))
  },
  __caml_parser_env => {
    let _1: 'expression = Parsing.peek_val(__caml_parser_env, 2)
    let _3: 'expression = Parsing.peek_val(__caml_parser_env, 0)
    Obj.repr((Divide(_1, _3): 'expression))
  },
  __caml_parser_env => {
    let _2: 'expression = Parsing.peek_val(__caml_parser_env, 0)
    Obj.repr((Negate(_2): 'expression))
  },
  __caml_parser_env => {
    let _2: 'expression = Parsing.peek_val(__caml_parser_env, 1)
    Obj.repr((_2: 'expression))
  },
  /* Entry toplevel */
  __caml_parser_env => raise(Parsing.YYexit(Parsing.peek_val(__caml_parser_env, 0))),
]
let yytables = {
  Parsing.actions: yyact,
  Parsing.transl_const: yytransl_const,
  Parsing.transl_block: yytransl_block,
  Parsing.lhs: yylhs,
  Parsing.len: yylen,
  Parsing.defred: yydefred,
  Parsing.dgoto: yydgoto,
  Parsing.sindex: yysindex,
  Parsing.rindex: yyrindex,
  Parsing.gindex: yygindex,
  Parsing.tablesize: yytablesize,
  Parsing.table: yytable,
  Parsing.check: yycheck,
  Parsing.error_function: parse_error,
  Parsing.names_const: yynames_const,
  Parsing.names_block: yynames_block,
}
let toplevel = (lexfun: Lexing.lexbuf => token, lexbuf: Lexing.lexbuf): Arith_syntax.expression =>
  Parsing.yyparse(yytables, 1, lexfun, lexbuf)
