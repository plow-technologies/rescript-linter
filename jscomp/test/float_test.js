// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Mt = require("./mt.js");
var Caml = require("../../lib/js/caml.js");
var $$Array = require("../../lib/js/array.js");
var Caml_obj = require("../../lib/js/caml_obj.js");
var Mt_global = require("./mt_global.js");
var Caml_float = require("../../lib/js/caml_float.js");
var Caml_int64 = require("../../lib/js/caml_int64.js");
var Pervasives = require("../../lib/js/pervasives.js");

var test_id = {
  contents: 0
};

var suites = {
  contents: /* [] */0
};

function eq(loc) {
  return function (param, param$1) {
    return Mt_global.collect_eq(test_id, suites, loc, param, param$1);
  };
}

function approx(loc) {
  return function (param, param$1) {
    return Mt_global.collect_approx(test_id, suites, loc, param, param$1);
  };
}

var epsilon_float = Caml_int64.float_of_bits([
      1018167296,
      0
    ]);

var match = Caml_float.frexp_float(12.0);

var match$1 = Caml_float.frexp_float(0);

var match$2 = Caml_float.frexp_float(-12.0);

var results = $$Array.append([
      [
        Math.log10(2),
        0.301029995663981198
      ],
      [
        Caml_float.ldexp_float(1, 6),
        64
      ],
      [
        Caml_float.ldexp_float(1, 5),
        32
      ],
      [
        Caml_float.ldexp_float(1.e-5, 1024),
        1.79769313486231605e+303
      ],
      [
        Caml_float.ldexp_float(1, -1024),
        5.56268464626800346e-309
      ],
      [
        Caml_float.hypot_float(3, 4),
        5
      ],
      [
        Caml_float.hypot_float(4, 3),
        5
      ],
      [
        Caml_float.hypot_float(5, 12),
        13
      ],
      [
        Caml_float.hypot_float(12, 5),
        13
      ],
      [
        Caml_float.copysign_float(22.3, -1),
        -22.3
      ],
      [
        Caml_float.copysign_float(22.3, 1),
        22.3
      ],
      [
        Caml_float.expm1_float(1e-15),
        1.00000000000000067e-15
      ],
      [
        Math.log1p(1e-10),
        9.9999999995000007e-11
      ]
    ], [
      [
        match$1[0],
        0
      ],
      [
        match$1[1],
        0
      ],
      [
        match[0],
        0.75
      ],
      [
        match[1],
        4
      ],
      [
        match$2[0],
        -0.75
      ],
      [
        match$2[1],
        4
      ]
    ]);

function from_pairs(ps) {
  return $$Array.to_list($$Array.mapi((function (i, param) {
                    var b = param[1];
                    var a = param[0];
                    return [
                            "pair " + i,
                            (function (param) {
                                return {
                                        TAG: "Approx",
                                        _0: a,
                                        _1: b
                                      };
                              })
                          ];
                  }), ps));
}

var float_compare = Caml.float_compare;

var generic_compare = Caml_obj.compare;

function float_equal(x, y) {
  return x === y;
}

var generic_equal = Caml_obj.equal;

function float_notequal(x, y) {
  return x !== y;
}

var generic_notequal = Caml_obj.notequal;

function float_lessthan(x, y) {
  return x < y;
}

var generic_lessthan = Caml_obj.lessthan;

function float_greaterthan(x, y) {
  return x > y;
}

var generic_greaterthan = Caml_obj.greaterthan;

function float_lessequal(x, y) {
  return x <= y;
}

var generic_lessequal = Caml_obj.lessequal;

function float_greaterequal(x, y) {
  return x >= y;
}

var generic_greaterequal = Caml_obj.greaterequal;

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 59, characters 5-12", Pervasives.classify_float(3), "FP_normal");

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 60, characters 5-12", Caml_float.modf_float(-3.125), [
      -0.125,
      -3
    ]);

var match$3 = Caml_float.modf_float(Number.NaN);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 62, characters 4-11", [
      Number.isNaN(match$3[0]),
      Number.isNaN(match$3[1])
    ], [
      true,
      true
    ]);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 71, characters 4-11", $$Array.map((function (x) {
            if (x > 0) {
              return 1;
            } else if (x < 0) {
              return -1;
            } else {
              return 0;
            }
          }), $$Array.map((function (param) {
                return Caml.float_compare(param[0], param[1]);
              }), [
              [
                1,
                3
              ],
              [
                2,
                1
              ],
              [
                3,
                2
              ]
            ])), [
      -1,
      1,
      1
    ]);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 83, characters 5-12", Caml_float.copysign_float(-3, 0), 3);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 84, characters 5-12", Caml_float.copysign_float(3, 0), 3);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 85, characters 5-12", Math.log10(10), 1);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 86, characters 5-12", Caml_float.expm1_float(0), 0);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 87, characters 5-12", Number("3.0"), 3.0);

Mt_global.collect_approx(test_id, suites, "File \"float_test.res\", line 88, characters 9-16", Caml_float.expm1_float(2), 6.38905609893065);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 89, characters 5-12", Caml.float_compare(NaN, NaN), 0);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 90, characters 5-12", Caml_obj.compare(NaN, NaN), 0);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 91, characters 5-12", Caml.float_compare(NaN, Pervasives.neg_infinity), -1);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 92, characters 5-12", Caml_obj.compare(NaN, Pervasives.neg_infinity), -1);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 93, characters 5-12", Caml.float_compare(Pervasives.neg_infinity, NaN), 1);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 94, characters 5-12", Caml_obj.compare(Pervasives.neg_infinity, NaN), 1);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 95, characters 5-12", NaN === NaN, false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 96, characters 5-12", Caml_obj.equal(NaN, NaN), false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 97, characters 5-12", 4.2 === NaN, false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 98, characters 5-12", Caml_obj.equal(4.2, NaN), false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 99, characters 5-12", NaN === 4.2, false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 100, characters 5-12", Caml_obj.equal(NaN, 4.2), false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 101, characters 5-12", NaN !== NaN, true);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 102, characters 5-12", Caml_obj.notequal(NaN, NaN), true);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 103, characters 5-12", 4.2 !== NaN, true);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 104, characters 5-12", Caml_obj.notequal(4.2, NaN), true);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 105, characters 5-12", NaN !== 4.2, true);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 106, characters 5-12", Caml_obj.notequal(NaN, 4.2), true);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 107, characters 5-12", NaN < NaN, false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 108, characters 5-12", Caml_obj.lessthan(NaN, NaN), false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 109, characters 5-12", 4.2 < NaN, false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 110, characters 5-12", Caml_obj.lessthan(4.2, NaN), false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 111, characters 5-12", NaN < 4.2, false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 112, characters 5-12", Caml_obj.lessthan(NaN, 4.2), false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 113, characters 5-12", NaN > NaN, false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 114, characters 5-12", Caml_obj.greaterthan(NaN, NaN), false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 115, characters 5-12", 4.2 > NaN, false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 116, characters 5-12", Caml_obj.greaterthan(4.2, NaN), false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 117, characters 5-12", NaN > 4.2, false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 118, characters 5-12", Caml_obj.greaterthan(NaN, 4.2), false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 119, characters 5-12", NaN <= NaN, false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 120, characters 5-12", Caml_obj.lessequal(NaN, NaN), false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 121, characters 5-12", 4.2 <= NaN, false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 122, characters 5-12", Caml_obj.lessequal(4.2, NaN), false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 123, characters 5-12", NaN <= 4.2, false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 124, characters 5-12", Caml_obj.lessequal(NaN, 4.2), false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 125, characters 5-12", NaN >= NaN, false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 126, characters 5-12", Caml_obj.greaterequal(NaN, NaN), false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 127, characters 5-12", 4.2 >= NaN, false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 128, characters 5-12", Caml_obj.greaterequal(4.2, NaN), false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 129, characters 5-12", NaN >= 4.2, false);

Mt_global.collect_eq(test_id, suites, "File \"float_test.res\", line 130, characters 5-12", Caml_obj.greaterequal(NaN, 4.2), false);

var match$4 = Caml_float.modf_float(32.3);

var b = match$4[1];

var a = match$4[0];

Mt.from_pair_suites("Float_test", Pervasives.$at({
          hd: [
            "mod_float",
            (function (param) {
                return {
                        TAG: "Approx",
                        _0: 3.2 % 0.5,
                        _1: 0.200000000000000178
                      };
              })
          ],
          tl: {
            hd: [
              "modf_float1",
              (function (param) {
                  return {
                          TAG: "Approx",
                          _0: a,
                          _1: 0.299999999999997158
                        };
                })
            ],
            tl: {
              hd: [
                "modf_float2",
                (function (param) {
                    return {
                            TAG: "Approx",
                            _0: b,
                            _1: 32
                          };
                  })
              ],
              tl: {
                hd: [
                  "int_of_float",
                  (function (param) {
                      return {
                              TAG: "Eq",
                              _0: 3,
                              _1: 3
                            };
                    })
                ],
                tl: /* [] */0
              }
            }
          }
        }, Pervasives.$at(from_pairs(results), suites.contents)));

exports.test_id = test_id;
exports.suites = suites;
exports.eq = eq;
exports.approx = approx;
exports.epsilon_float = epsilon_float;
exports.results = results;
exports.from_pairs = from_pairs;
exports.float_compare = float_compare;
exports.generic_compare = generic_compare;
exports.float_equal = float_equal;
exports.generic_equal = generic_equal;
exports.float_notequal = float_notequal;
exports.generic_notequal = generic_notequal;
exports.float_lessthan = float_lessthan;
exports.generic_lessthan = generic_lessthan;
exports.float_greaterthan = float_greaterthan;
exports.generic_greaterthan = generic_greaterthan;
exports.float_lessequal = float_lessequal;
exports.generic_lessequal = generic_lessequal;
exports.float_greaterequal = float_greaterequal;
exports.generic_greaterequal = generic_greaterequal;
/* results Not a pure module */
