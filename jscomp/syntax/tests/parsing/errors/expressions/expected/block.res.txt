
  Syntax error!
  tests/parsing/errors/expressions/block.res:14:4-15:1

  12 │ 
  13 │     thisId === id
  14 │   }
  15 │ }
  16 │ 
  17 │ let x = {

  Did you forget a `)` here?


  Syntax error!
  tests/parsing/errors/expressions/block.res:18:25-19:1

  16 │ 
  17 │ let x = {
  18 │   loop(0, Nil->push(doc)
  19 │ } // closing ) above is missing
  20 │ 
  21 │ switch stack {

  Did you forget a `)` here?


  Syntax error!
  tests/parsing/errors/expressions/block.res:22:11-23:1

  20 │ 
  21 │ switch stack {
  22 │ | Empty =>
  23 │ | Cons(doc, rest) => ()
  24 │ | Join(doc1, doc2) =>
  25 │ 	buffer->Buffer.add_string(indentation)

  Looks like there might be an expression missing here


  Syntax error!
  tests/parsing/errors/expressions/block.res:26:7-27:1

  24 │ | Join(doc1, doc2) =>
  25 │ 	buffer->Buffer.add_string(indentation)
  26 │ 	loop(
  27 │ }
  28 │ 
  29 │ let pipeline = switch scheduler {

  Did you forget a `)` here?


  Syntax error!
  tests/parsing/errors/expressions/block.res:30:10-31:1

  28 │ 
  29 │ let pipeline = switch scheduler {
  30 │ | Some =>
  31 │ | None => ()
  32 │ }
  33 │ 

  Looks like there might be an expression missing here

let findThreadByIdLinearScan ~threads:((threads)[@res.namedArgLoc ]) 
  ~id:((id)[@res.namedArgLoc ])  =
  ((Js.Array2.findi ThreadsModel.threads
      (fun thread ->
         fun i ->
           ((let thisId =
               match thread with
               | ServerData.OneToOne { otherPersonIDWhichIsAlsoThreadID } ->
                   otherPersonIDWhichIsAlsoThreadID
               | Group { id } -> id
               | Unknown { id } ->
                   (unknown.id |. Js.String.make) |. FBID.ofStringUnsafe in
             thisId == id)
           [@res.braces ])))
  [@res.braces ])
let x = ((loop 0 (Nil |. (push doc)))[@res.braces ])
;;match stack with
  | Empty -> [%rescript.exprhole ]
  | Cons (doc, rest) -> ()
  | Join (doc1, doc2) -> (buffer |. (Buffer.add_string indentation); loop ())
let pipeline =
  match scheduler with | Some -> [%rescript.exprhole ] | None -> ()