
  Syntax error!
  tests/parsing/errors/structure/letBinding.res:2:18-20

  1 │ // missing =
  2 │ let rightResource ur.resources.find(
  3 │   r => r.account_id === connection.left.account.id
  4 │ )

  Did you forget a `=` here?


  Syntax error!
  tests/parsing/errors/structure/letBinding.res:8:12-13

   6 │ let x = {
   7 │   // missing =
   8 │   let field p->parseFieldDeclaration 
   9 │   field
  10 │ }

  Did you forget a `=` here?


  Syntax error!
  tests/parsing/errors/structure/letBinding.res:14:19-26

  12 │ let t = {
  13 │ 	// missing =
  14 │ 	let (_, _, token) scanner->scan
  15 │   token
  16 │ }

  Did you forget a `=` here?


  Syntax error!
  tests/parsing/errors/structure/letBinding.res:18:39-20:3

  16 │ }
  17 │ 
  18 │ let keyTable: Belt.Map.String.t<int> =
  19 │ 
  20 │ let foo = 
  21 │ 
  22 │ // no magic in the syntax

  This let-binding misses an expression


  Syntax error!
  tests/parsing/errors/structure/letBinding.res:20:10-23:3

  18 │ let keyTable: Belt.Map.String.t<int> =
  19 │ 
  20 │ let foo = 
  21 │ 
  22 │ // no magic in the syntax
  23 │ let x: int :> string = y
  24 │ 
  25 │ // no magic in the syntax

  This let-binding misses an expression


  Syntax error!
  tests/parsing/errors/structure/letBinding.res:23:11-13

  21 │ 
  22 │ // no magic in the syntax
  23 │ let x: int :> string = y
  24 │ 
  25 │ // no magic in the syntax

  Did you forget a `=` here?


  Syntax error!
  tests/parsing/errors/structure/letBinding.res:26:6-8

  24 │ 
  25 │ // no magic in the syntax
  26 │ let x :> string = y
  27 │ 
  28 │ // no magic in the syntax

  Did you forget a `=` here?


  Syntax error!
  tests/parsing/errors/structure/letBinding.res:29:13-15

  27 │ 
  28 │ // no magic in the syntax
  29 │ let x : int1 :> int2 = 3 :> int3
  30 │ 

  Did you forget a `=` here?

let rightResource =
  (ur.resources).find
    (fun r -> r.account_id == ((connection.left).account).id)
let x = ((let field = p |. parseFieldDeclaration in field)[@res.braces ])
let t = ((let (_, _, token) = scanner |. scan in token)[@res.braces ])
let (keyTable : int Belt.Map.String.t) = [%rescript.exprhole ]
let foo = [%rescript.exprhole ]
let (x : int) = string = y
let x = string = y
let (x : int1) = (int2 = 3 :> int3)