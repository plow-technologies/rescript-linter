let f (type t) (xs : t list) = ()
let f (type t) (xs : t list) (type s) (ys : s list) = ()
let f (type t) (type u) (type v) (xs : (t * u * v) list) = ()
let f (type t) (type u) (type v) (xs : (t * u * v) list) (type s) (type w)
  (type z) (ys : (s * w * z) list) = ()
let f = ((fun (type t) -> fun (type u) -> fun (type v) ->
  fun (xs : (t * u * v) list) -> ((fun (type s) -> fun (type w) -> fun (type
    z) -> fun (ys : (s * w * z) list) -> ())[@attr2 ]))
  [@attr ])
let f = ((fun (type t) -> ((fun (type s) ->
  fun (xs : (t * s) list) -> ((fun (type u) -> ((fun (type v) -> fun (type w)
    -> fun (ys : (u * v * w) list) -> ())[@attr ]))[@attr ]))
  [@attr ]))[@attr ])
let cancel_and_collect_callbacks :
  'a 'u 'c .
    packed_callbacks list -> ('a, 'u, 'c) promise -> packed_callbacks list
  = fun (type x) ->
  fun callbacks_accumulator -> fun (p : (_, _, c) promise) -> ()