let f x = x + 1
let f _ = Js.log {js|test|js}
let f () = Js.log {js|unit|js}
let f (Reducer (inst, comp)) = inst.render comp
let f (Instance) = ()
let f a b = a + b
let f 1 2 = ()
let f {js|stringPattern|js} = ()
let f {js|stringPattern|js} {js|stringPattern|js} = ()
let f () = ()
let f (a : int) (b : int) = a + b
let f _ _ = ()
let f [|a;b|] [|c;d|] = ((a + b) + c) + d
let f { a } = a + 1
let f { a; b } { c; d } = ((a + b) + c) + d
let f (a, b) = a + b
let f (a, b) (c, d) = ((a + b) + c) + d
let f exception Terminate = ()
let f exception Terminate exception Exit = ()
let f (lazy x) = ()
let f (lazy x) (lazy y) = ()
let f [] = ()
let f (x::xs) = x + (xs |. Belt.List.length)
let f (x : int) (y : int) = x + y
let f ~a:((a)[@res.namedArgLoc ])  ~b:((b)[@res.namedArgLoc ])  = a + b
let f ~a:((x)[@res.namedArgLoc ])  ~b:((y)[@res.namedArgLoc ])  = x + y
let f ~a:(((x : int))[@res.namedArgLoc ]) 
  ~b:(((y : int))[@res.namedArgLoc ])  = x + y
let f ?a:(((a)[@res.namedArgLoc ])= 1)  ?b:(((b)[@res.namedArgLoc ])= 2)  c =
  (a + b) + c
let f ?a:(((x)[@res.namedArgLoc ])= 1)  ?b:(((y)[@res.namedArgLoc ])= 2)  c =
  (x + y) + c
let f ?a:((((x : int))[@res.namedArgLoc ])= 1) 
  ?b:((((y : int))[@res.namedArgLoc ])= 2)  c = (x + y) + c
let f ?a:((a)[@res.namedArgLoc ])  ?b:((b)[@res.namedArgLoc ])  c =
  match (a, b) with | (Some a, Some b) -> (a + b) + c | _ -> 3
let f ?a:((x)[@res.namedArgLoc ])  ?b:((y)[@res.namedArgLoc ])  c =
  match (x, y) with | (Some a, Some b) -> (a + b) + c | _ -> 3
let f ?a:(((x : int option))[@res.namedArgLoc ]) 
  ?b:(((y : int option))[@res.namedArgLoc ])  c =
  match (x, y) with | (Some a, Some b) -> (a + b) + c | _ -> 3
let f a b = a + b
let f = ((Function$ (fun () -> ()))[@res.arity 1])
let f = ((Function$ (fun () -> ()))[@res.arity 1])
let f = ((Function$ (fun a -> fun b -> fun c -> ()))[@res.arity 3])
let f =
  ((Function$
      (fun a -> fun b -> ((Function$ (fun c -> fun d -> ()))[@res.arity 2])))
  [@res.arity 2])
let f =
  ((Function$
      (fun a ->
         ((Function$ (fun b -> ((Function$ (fun c -> ()))[@res.arity 1])))
         [@res.arity 1])))
  [@res.arity 1])
let f =
  ((Function$
      (fun ~a:((a)[@res.namedArgLoc ][@attr ]) ->
         fun b ->
           ((Function$
               (fun ~c:((c)[@res.namedArgLoc ][@attr ]) -> fun d -> ()))
           [@res.arity 2])))
  [@res.arity 2])
let f =
  ((Function$
      (fun ~a:((a)[@res.namedArgLoc ][@attr ]) ->
         fun ((b)[@attrOnB ]) ->
           ((Function$
               (fun ~c:((c)[@res.namedArgLoc ][@attr ]) ->
                  fun ((d)[@attrOnD ]) -> ()))
           [@res.arity 2])))
  [@res.arity 2])
let f list = list ()
;;match colour with
  | Red when
      (l = l') ||
        (Clflags.classic.contents &&
           ((l = Nolabel) && (not (is_optional l'))))
      -> (t1, t2)
  | _ -> ()
let arr =
  [|((fun _ -> doThings ()));((fun _ -> doThings ()));((fun _ -> doThings ()))|]
let list =
  [(fun _ -> doThings ()); (fun _ -> doThings ()); (fun _ -> doThings ())]
let tuple =
  ((fun _ -> doThings ()), (fun _ -> doThings ()), (fun _ -> doThings ()))
;;fun _ -> doThings ()
let x =
  Constructore
    ((fun _ -> copyChecklistItemCB ()), (fun _ -> copyChecklistItemCB ()))
let y =
  `Constructore
    ((fun _ -> copyChecklistItemCB ()), (fun _ -> copyChecklistItemCB ()))
let f list = list + 1
let foo = (() : unit)
type nonrec u = unit
let un = (() : u)
type nonrec ('a, 'b) d = ('a * 'b)
let c () = ((1, 2) : ('a, 'b) d)
let fn f = f
type nonrec f = int -> unit
let a = fn (fun _ -> () : f)