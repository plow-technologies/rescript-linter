let r = { a = expr }
let r = { a = expr }
let r = { Parsetree.pexp_attributes = [||]; Parsetree.loc = loc }
let r = { a; b; c }
let r = { A.a = a; b }
let r = { A.a = a; b; C.c = c }
let r = { Parsetree.pexp_attributes = pexp_attributes; Parsetree.loc = loc }
let r = { Parsetree.pexp_attributes = pexp_attributes; Parsetree.loc = loc }
let r = { a = (expr : int); b = (x : string) }
let r = { expr with pexp_attributes = [||] }
let r = { expr with pexp_attributes = [||]; pexp_loc = loc }
let r = { expr with pexp_attributes = [||] }
let r = { (make () : myRecord) with foo = bar }
let r = { (make () : myRecord) with foo = bar }
let r =
  {
    x = ((None)[@res.optional ]);
    y = ((None)[@res.optional ]);
    z = (((None : tt))[@res.optional ])
  }
let z name = { name = ((name)[@res.optional ]); x = 3 }
let z name = { name = ((name)[@res.optional ]); x = 3 }
let z name = { name; x = ((x)[@res.optional ]) }
let zz name = { name; x = ((x)[@res.optional ]) }
let _ =
  match z with
  | { x = ((None)[@res.optional ]); y = ((None)[@res.optional ]);
      z = (((None : tt))[@res.optional ]) } -> 11
  | { name = ((name)[@res.optional ]); x = 3 } -> 42
  | { name = ((name)[@res.optional ]); x = 3 } -> 4242
  | { x = ((None)[@res.optional ]); y = ((None)[@res.optional ]);
      z = (((None : tt))[@res.optional ]) } -> 11
  | { name = ((name)[@res.optional ]); x = 3 } -> 42
  | { name = ((name)[@res.optional ]); x = 3 } -> 4242
type nonrec tt = {
  x: int ;
  y: string [@ns.opttinal ]}
type nonrec ttt = {
  x: int ;
  y: string [@res.optional ]}
type nonrec multipleWithAttrs = {
  x: int ;
  y: string [@res.optional ][@attr ]}
type nonrec singleWithAttrs = {
  y: string [@res.optional ][@attr ]}
type nonrec inlineWithAttrs =
  | A of {
  value: string [@as {js|VALUE|js}]} 