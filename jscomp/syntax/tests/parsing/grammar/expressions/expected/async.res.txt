let greetUser =
  ((fun userId ->
      ((let name = ((getUserName userId)[@res.await ][@res.uapp ]) in
        ({js|Hello |js} ^ name) ^ {js|!|js})
      [@res.braces ]))
  [@res.async ])
;;((fun () -> 123)[@res.async ])
let fetch =
  ((Function$ ((fun url -> ((browserFetch url)[@res.uapp ]))[@res.async ]))
  [@res.braces ][@res.arity 1])
let fetch2 =
  ((((Function$ (((fun url -> ((browserFetch url)[@res.uapp ])))
        [@res.async ]))
    [@res.arity 1]);
    ((Function$ (((fun url -> ((browserFetch2 url)[@res.uapp ])))
        [@res.async ]))
    [@res.arity 1]))
  [@res.braces ])
let async =
  ((let f = async () in
    () |. async;
    async ();
    async.async;
    { async = (async.(async)) };
    (result |. async) |. (mapAsync (fun a -> doStuff a)))
  [@res.braces ])
let f =
  ((if isPositive
    then ((fun a -> fun b -> (a + b : int))[@res.async ])
    else (((fun c -> fun d -> (c - d : int)))[@res.async ]))
  [@res.ternary ])
let foo = async ~a:((34)[@res.namedArgLoc ])
let bar = ((fun ~a:((a)[@res.namedArgLoc ]) -> a + 1)[@res.async ])
let ex1 = ((3)[@res.await ]) + ((4)[@res.await ])
let ex2 = ((3)[@res.await ]) ** ((4)[@res.await ])
let ex3 = ((foo |. (bar ~arg:((arg)[@res.namedArgLoc ])))[@res.await ])
let ex4 = (((foo.bar).baz)[@res.await ])