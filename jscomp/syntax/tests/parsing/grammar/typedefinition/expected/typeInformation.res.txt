type nonrec t
type nonrec t = Module.t
type nonrec t = Module.t constraint 'a = int
type nonrec t = Module.t constraint 'a = int constraint 'b = string
type nonrec t = {
  a: int }
type nonrec t = {
  a: int } constraint 'a = int
type nonrec t = {
  a: int } constraint 'a = int constraint 'b = string
type nonrec t = Module.t = {
  a: int }
type nonrec t = Module.t = {
  a: int } constraint 'a = int
type nonrec t = Module.t =
  {
  a: int } constraint 'a = int constraint 'b = string
type nonrec t = node
type nonrec t = node constraint 'a = int
type nonrec t = node constraint 'a = int constraint 'b = string
type nonrec t = node = {
  a: int }
type nonrec t = node = {
  a: int } constraint 'a = int
type nonrec t = node = {
  a: int } constraint 'a = int constraint 'b = string
type nonrec t =
  | Red 
type nonrec t =
  | Red  constraint 'a = string
type nonrec t =
  | Red  constraint 'a = string constraint 'b = int
type nonrec t =
  | Red 
  | Blue 
type nonrec t =
  | Red 
  | Blue  constraint 'a = string constraint 'b = int
type nonrec t =
  | Red 
type nonrec t =
  | Red  constraint 'a = string
type nonrec t =
  | Red  constraint 'a = string constraint 'b = int
type nonrec t =
  | Red 
  | Blue 
type nonrec t =
  | Red 
  | Blue  constraint 'a = string constraint 'b = int
type nonrec t = ..
type nonrec t =
  | Red 
type nonrec t =
  | Red  constraint 'a = string
type nonrec t =
  | Red  constraint 'a = string constraint 'b = int
type nonrec t =
  | Red 
  | Blue 
type nonrec t =
  | Red 
  | Blue  constraint 'a = string constraint 'b = int
type nonrec t = private
  | Green 
type nonrec t = private
  | Green  constraint 'a = unit
type nonrec t = private
  | Green  constraint 'a = unit constraint 'b = unit
type nonrec t = {
  x: int ;
  y: int }
type nonrec callback = (ReactEvent.Mouse.t -> unit) as 'callback
type nonrec callback = ReactEvent.Mouse.t -> unit as 'u
type nonrec callback = (ReactEvent.Mouse.t -> unit) as 'callback